package com.taehyeon.chap04;

/**
 *  --컬렉션과 스트림
 *  - 컬렉션과 스트림은 모두 연속된 요소 형식의 값을 저장하는 자료구조의 인터페이스를 제공
 *  - 둘다 순차적으로 요소에 접근
 *  - 데이터 계산을 언제 하느냐에 따라 컬렉션과 스트림의 가장 큰 차이
 *
 *  - 컬렉션 : 각 계산식을 만날때 마다 데이터가 계산, 자료구조이므로 데이터에 접근  변경, 저장 같은 연산이 주 기능
 *      L 현재 자료구조가 포함하는 모든 값을 메모리에 저장하는 자료구조
 *      L 컬렉션의 모든 요소는 컬렉션에 추가하기 전에 계산되어야하고 , 메모리 사용량이 늘어남
 *
 *  - 스트림 : 최종 연산이 실행될 때에 데이터라 계산되며, filter ,sorted, map 처럼 계산식(람다)를 표현하는 것이 주요 관심사로
 *          계산을 JVM에 위임
 *      L 요청할 때만 요소를 계산하는 고정된 자료구조로 스트림에 요소를 추가하거나 제거할수 없음
 *      L 사용자가 데이터를 요청할 때만 값을 계산
 *      L 스트림의 탐색된 요소는 소비됨. 한번 탐색한 요소를 다시 탐색하려면 초기 데이터 소스에서 새로운 스트림을 만들어야 됨
 *
 *
 *
 *  -- 외부 반복과 내부 반복
 *  - 외부 반복 : 개발자가 직접 컬렉션 요소를 반복해서 처리하는 방식(ex. for, foreach)
 *  - 내부 반복 : 컬렉션 내부에서 요소들을 반복 시키고, 개발자는 요소 별로 처리해야 할 코드만 제고하는 방식
 *
 *  -- 스트림의 연산
 *  - 연결할 수 있는 스트림 연산을 중간 연산
 *  - 스트림을 닫는 연산을 최종 연산 @Stream.java 참고
 *
 * */
public class BetweenCollectionAndStream {
    public static void main(String[] args) {

    }
}
